"""
This module defines a system for generating and enhancing social media posts using Google's Vertex AI and an external image generation service.

### Components

1. **Imports**:
   - `requests`: Used for making HTTP requests to the external image generation service.
   - `vertexai`: The Vertex AI library for interacting with Google's AI models.
   - `logging`: Provides logging functionality for debugging and tracking.
   - `io`: Used for handling byte streams of images.
   - `PIL.Image`: Provides image processing capabilities.
   - `marketing_sm.data.prompts`: Imports system and user messages, and output parser definitions.

2. **Functions**:
   - `generate_images(posts)`:
     - **Purpose**: Fetches images based on descriptions provided in social media posts and updates the posts with these images.
     - **Parameters**:
       - `posts`: A dictionary containing the posts, each with a 'prompt_image' field that holds image descriptions.
     - **Returns**: The `posts` dictionary updated with images fetched from the external image generation service.

3. **Class `Model`**:
   - **Purpose**: Initializes and utilizes a generative model to create content for social media posts. It also handles the integration with an external image generation service.

   - **Initialization**:
     - `self._model`: An instance of `GenerativeModel` from Vertex AI, configured with a specific model name and system instruction.
     - `self._generation_config`: Configuration settings for content generation, including token limits and sampling methods.
     - `self._safety_settings`: Safety configurations to block harmful content categories.

   - **Methods**:
     - `__init__()`: Initializes the `Model` class with a generative model, generation configurations, and safety settings.

     - `create_posts(business, business_examples, business_description, suggestions, month, total_posts, edu_posts, mot_posts, int_posts, sell_posts, colors)`:
       - **Purpose**: Generates social media posts based on input parameters, including business details, post suggestions, and other configurations. It then retrieves images for the posts and returns the final content.
       - **Parameters**:
         - `business`: The name of the business.
         - `business_examples`: Examples related to the business.
         - `business_description`: A description of the business.
         - `suggestions`: Suggestions for post content.
         - `month`: The month for which the posts are generated.
         - `total_posts`: The total number of posts to generate.
         - `edu_posts`, `mot_posts`, `int_posts`, `sell_posts`: Counts for different types of posts (educational, motivational, interactive, selling).
         - `colors`: The colors associated with the business.
       - **Returns**: The posts enriched with images, formatted and ready for use.

### Example Usage

To use this module:
1. Initialize the `Model` class.
2. Call `create_posts()` with the appropriate parameters to generate social media posts.
3. The resulting posts will include content generated by Vertex AI and images fetched from the external service.

This code ensures that social media content is created with high-quality text and relevant images, enhancing the engagement of social media posts.
"""

import requests
import vertexai
import logging
import io

from vertexai.generative_models import GenerativeModel
import vertexai.preview.generative_models as generative_models

from PIL import Image

from marketing_sm.data.prompts import SYSTEM_MESSAGE, USER_MESSAGE, OUTPUT_PARSER
from marketing_sm.infrastructure.settings import Settings

settings = Settings()

vertexai.init(project=settings.google_api_project, location=settings.google_location)

logger = logging.getLogger()


def generate_images(posts):
    for idx, post in enumerate(posts["posts"]):
        images = []
        for image_description in post["prompt_image"]:
            response = requests.post(
                f"https://pollinations.ai/prompt/{image_description}"
            )
            if response.status_code == 200:
                image = Image.open(io.BytesIO(response.content))
                images.append(image)
        posts["posts"][idx]["images"] = images
    return posts


class TextGenerationPipeline:
    def __init__(self):
        self._model = GenerativeModel(
            settings.google_text_model,
            system_instruction=[
                SYSTEM_MESSAGE.format(
                    format_instructions=OUTPUT_PARSER.get_format_instructions()
                )
            ],
        )
        self._generation_config = {
            "max_output_tokens": 8192,
            "temperature": 1,
            "top_p": 0.95,
        }
        self._safety_settings = {
            generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        }

    def create_posts(
            self,
            business,
            business_examples,
            business_description,
            suggestions,
            month,
            total_posts,
            edu_posts,
            mot_posts,
            int_posts,
            sell_posts,
            colors,
    ):
        message = USER_MESSAGE.format(
            business=business,
            business_description=business_description,
            business_examples=business_examples,
            total_posts=total_posts,
            month=month,
            edu_posts=edu_posts,
            int_posts=int_posts,
            mot_posts=mot_posts,
            sell_posts=sell_posts,
            suggestions=suggestions,
            colors=colors,
        )

        logger.info(f"System Message: {self._model._system_instruction}")
        logger.info(f"User Message: {message}")

        responses = self._model.generate_content(
            [message],
            generation_config=self._generation_config,
            safety_settings=self._safety_settings,
            stream=True,
        )

        results = ""
        for response in responses:
            results += response.candidates[0].text

        posts = OUTPUT_PARSER.parse(results)

        posts_with_images = generate_images(posts)
        return posts_with_images
